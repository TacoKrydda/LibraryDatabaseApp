// <auto-generated />
using System;
using LibraryDatabaseClassLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryDatabaseClassLibrary.Migrations
{
    [DbContext(typeof(LibraryDatabseContext))]
    partial class LibraryDatabseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("AuthorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            AuthorDescription = "Famous for Harry Potter series",
                            AuthorName = "J.K. Rowling"
                        },
                        new
                        {
                            AuthorId = 2,
                            AuthorDescription = "Author of A Song of Ice and Fire",
                            AuthorName = "George R.R. Martin"
                        },
                        new
                        {
                            AuthorId = 3,
                            AuthorDescription = "Author of The Lord of the Rings",
                            AuthorName = "J.R.R. Tolkien"
                        },
                        new
                        {
                            AuthorId = 4,
                            AuthorDescription = "Pioneer of Science Fiction",
                            AuthorName = "Isaac Asimov"
                        },
                        new
                        {
                            AuthorId = 5,
                            AuthorDescription = "Author of The Hunger Games",
                            AuthorName = "Suzanne Collins"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.AuthorBook", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 2
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 3
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 4
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 5
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 6
                        },
                        new
                        {
                            AuthorId = 1,
                            BookId = 7
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 8
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 9
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 10
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 11
                        },
                        new
                        {
                            AuthorId = 2,
                            BookId = 12
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 13
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 14
                        },
                        new
                        {
                            AuthorId = 3,
                            BookId = 15
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 16
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 17
                        },
                        new
                        {
                            AuthorId = 4,
                            BookId = 18
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 19
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 20
                        },
                        new
                        {
                            AuthorId = 5,
                            BookId = 21
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("BookDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookQuantity")
                        .HasColumnType("int");

                    b.Property<string>("BookTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            BookDescription = "First book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            BookId = 2,
                            BookDescription = "Second book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Chamber of Secrets"
                        },
                        new
                        {
                            BookId = 3,
                            BookDescription = "Third book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Prisoner of Azkaban"
                        },
                        new
                        {
                            BookId = 4,
                            BookDescription = "Fourth book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Goblet of Fire"
                        },
                        new
                        {
                            BookId = 5,
                            BookDescription = "Fifth book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Order of the Phoenix"
                        },
                        new
                        {
                            BookId = 6,
                            BookDescription = "Sixth book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Half-Blood Prince"
                        },
                        new
                        {
                            BookId = 7,
                            BookDescription = "Seventh book in the Harry Potter series",
                            BookQuantity = 10,
                            BookTitle = "Harry Potter and the Deathly Hallows"
                        },
                        new
                        {
                            BookId = 8,
                            BookDescription = "First book in A Song of Ice and Fire",
                            BookQuantity = 5,
                            BookTitle = "A Game of Thrones"
                        },
                        new
                        {
                            BookId = 9,
                            BookDescription = "Second book in A Song of Ice and Fire",
                            BookQuantity = 5,
                            BookTitle = "A Clash of Kings"
                        },
                        new
                        {
                            BookId = 10,
                            BookDescription = "Third book in A Song of Ice and Fire",
                            BookQuantity = 5,
                            BookTitle = "A Storm of Swords"
                        },
                        new
                        {
                            BookId = 11,
                            BookDescription = "Fourth book in A Song of Ice and Fire",
                            BookQuantity = 5,
                            BookTitle = "A Feast for Crows"
                        },
                        new
                        {
                            BookId = 12,
                            BookDescription = "Fifth book in A Song of Ice and Fire",
                            BookQuantity = 5,
                            BookTitle = "A Dance with Dragons"
                        },
                        new
                        {
                            BookId = 13,
                            BookDescription = "First book in The Lord of the Rings series",
                            BookQuantity = 6,
                            BookTitle = "The Fellowship of the Ring"
                        },
                        new
                        {
                            BookId = 14,
                            BookDescription = "Second book in The Lord of the Rings series",
                            BookQuantity = 6,
                            BookTitle = "The Two Towers"
                        },
                        new
                        {
                            BookId = 15,
                            BookDescription = "Third book in The Lord of the Rings series",
                            BookQuantity = 6,
                            BookTitle = "The Return of the King"
                        },
                        new
                        {
                            BookId = 16,
                            BookDescription = "First book in the Foundation series",
                            BookQuantity = 7,
                            BookTitle = "Foundation"
                        },
                        new
                        {
                            BookId = 17,
                            BookDescription = "Second book in the Foundation series",
                            BookQuantity = 7,
                            BookTitle = "Foundation and Empire"
                        },
                        new
                        {
                            BookId = 18,
                            BookDescription = "Third book in the Foundation series",
                            BookQuantity = 7,
                            BookTitle = "Second Foundation"
                        },
                        new
                        {
                            BookId = 19,
                            BookDescription = "First book in The Hunger Games series",
                            BookQuantity = 9,
                            BookTitle = "The Hunger Games"
                        },
                        new
                        {
                            BookId = 20,
                            BookDescription = "Second book in The Hunger Games series",
                            BookQuantity = 9,
                            BookTitle = "Catching Fire"
                        },
                        new
                        {
                            BookId = 21,
                            BookDescription = "Third book in The Hunger Games series",
                            BookQuantity = 9,
                            BookTitle = "Mockingjay"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookGenre", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenres");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 9,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 10,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 11,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 12,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 13,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 14,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 15,
                            GenreId = 1
                        },
                        new
                        {
                            BookId = 16,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 17,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 18,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 19,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 20,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 21,
                            GenreId = 2
                        },
                        new
                        {
                            BookId = 1,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 2,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 3,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 4,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 5,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 6,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 7,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 8,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 9,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 10,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 11,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 12,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 13,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 14,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 15,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 19,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 20,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 21,
                            GenreId = 3
                        },
                        new
                        {
                            BookId = 19,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 20,
                            GenreId = 4
                        },
                        new
                        {
                            BookId = 21,
                            GenreId = 4
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookLibrary", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "LibraryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("BookLibraries");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 2,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 3,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 4,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 5,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 6,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 7,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 8,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 9,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 10,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 11,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 12,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 13,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 14,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 15,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 16,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 17,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 18,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 19,
                            LibraryId = 1
                        },
                        new
                        {
                            BookId = 20,
                            LibraryId = 2
                        },
                        new
                        {
                            BookId = 21,
                            LibraryId = 2
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookPublisher", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("BookId", "PublisherId");

                    b.HasIndex("PublisherId");

                    b.ToTable("BookPublishers");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 2,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 3,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 4,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 5,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 6,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 7,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 8,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 9,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 10,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 11,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 12,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 13,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 14,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 15,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 16,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 17,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 18,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 19,
                            PublisherId = 1
                        },
                        new
                        {
                            BookId = 20,
                            PublisherId = 2
                        },
                        new
                        {
                            BookId = 21,
                            PublisherId = 2
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("GenreId");

                    b.HasIndex("GenreName")
                        .IsUnique();

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            GenreName = "Fantasy"
                        },
                        new
                        {
                            GenreId = 2,
                            GenreName = "Science Fiction"
                        },
                        new
                        {
                            GenreId = 3,
                            GenreName = "Adventure"
                        },
                        new
                        {
                            GenreId = 4,
                            GenreName = "Dystopian"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Hold", b =>
                {
                    b.Property<int>("HoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HoldId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("HoldId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Holds");

                    b.HasData(
                        new
                        {
                            HoldId = 1,
                            BookId = 2,
                            Date = new DateOnly(2024, 11, 23),
                            ReleaseDate = new DateOnly(2024, 12, 3),
                            Status = "Active",
                            UserId = 6
                        },
                        new
                        {
                            HoldId = 2,
                            BookId = 9,
                            Date = new DateOnly(2024, 11, 22),
                            ReleaseDate = new DateOnly(2024, 12, 2),
                            Status = "Active",
                            UserId = 7
                        },
                        new
                        {
                            HoldId = 3,
                            BookId = 14,
                            Date = new DateOnly(2024, 11, 24),
                            ReleaseDate = new DateOnly(2024, 12, 4),
                            Status = "Active",
                            UserId = 8
                        },
                        new
                        {
                            HoldId = 4,
                            BookId = 17,
                            Date = new DateOnly(2024, 11, 21),
                            ReleaseDate = new DateOnly(2024, 12, 1),
                            Status = "Active",
                            UserId = 9
                        },
                        new
                        {
                            HoldId = 5,
                            BookId = 20,
                            Date = new DateOnly(2024, 11, 20),
                            ReleaseDate = new DateOnly(2024, 11, 30),
                            Status = "Active",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryId"));

                    b.Property<string>("LibraryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LibraryId");

                    b.HasIndex("LibraryName")
                        .IsUnique();

                    b.ToTable("Libraries");

                    b.HasData(
                        new
                        {
                            LibraryId = 1,
                            LibraryName = "Central Library",
                            Location = "Main Street 123"
                        },
                        new
                        {
                            LibraryId = 2,
                            LibraryName = "West Side Library",
                            Location = "West Avenue 45"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Loan", b =>
                {
                    b.Property<int>("LoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoanId"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("LoanDate")
                        .HasColumnType("date");

                    b.Property<string>("LoanStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("ReturnDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoanId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            LoanId = 1,
                            BookId = 1,
                            DueDate = new DateOnly(2024, 12, 11),
                            LoanDate = new DateOnly(2024, 11, 11),
                            LoanStatus = "On Loan",
                            UserId = 1
                        },
                        new
                        {
                            LoanId = 2,
                            BookId = 8,
                            DueDate = new DateOnly(2024, 12, 16),
                            LoanDate = new DateOnly(2024, 11, 16),
                            LoanStatus = "Returned",
                            ReturnDate = new DateOnly(2024, 11, 26),
                            UserId = 2
                        },
                        new
                        {
                            LoanId = 3,
                            BookId = 13,
                            DueDate = new DateOnly(2024, 12, 21),
                            LoanDate = new DateOnly(2024, 11, 21),
                            LoanStatus = "On Loan",
                            UserId = 3
                        },
                        new
                        {
                            LoanId = 4,
                            BookId = 16,
                            DueDate = new DateOnly(2024, 12, 6),
                            LoanDate = new DateOnly(2024, 11, 6),
                            LoanStatus = "Overdue",
                            UserId = 4
                        },
                        new
                        {
                            LoanId = 5,
                            BookId = 19,
                            DueDate = new DateOnly(2024, 12, 19),
                            LoanDate = new DateOnly(2024, 11, 19),
                            LoanStatus = "On Loan",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PublisherId");

                    b.HasIndex("PublisherName")
                        .IsUnique();

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            PublisherName = "Penguin Books"
                        },
                        new
                        {
                            PublisherId = 2,
                            PublisherName = "HarperCollins"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "alice.johnson@example.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "bob.smith@example.com",
                            FirstName = "Bob",
                            LastName = "Smith",
                            Phone = "987-654-3210"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "charlie.brown@example.com",
                            FirstName = "Charlie",
                            LastName = "Brown",
                            Phone = "456-789-1234"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "diana.prince@example.com",
                            FirstName = "Diana",
                            LastName = "Prince",
                            Phone = "654-321-9876"
                        },
                        new
                        {
                            UserId = 5,
                            Email = "eve.taylor@example.com",
                            FirstName = "Eve",
                            LastName = "Taylor",
                            Phone = "321-654-7890"
                        },
                        new
                        {
                            UserId = 6,
                            Email = "frank.castle@example.com",
                            FirstName = "Frank",
                            LastName = "Castle",
                            Phone = "789-123-4567"
                        },
                        new
                        {
                            UserId = 7,
                            Email = "grace.hopper@example.com",
                            FirstName = "Grace",
                            LastName = "Hopper",
                            Phone = "567-890-1234"
                        },
                        new
                        {
                            UserId = 8,
                            Email = "henry.ford@example.com",
                            FirstName = "Henry",
                            LastName = "Ford",
                            Phone = "890-123-5678"
                        },
                        new
                        {
                            UserId = 9,
                            Email = "ivy.green@example.com",
                            FirstName = "Ivy",
                            LastName = "Green",
                            Phone = "432-876-0987"
                        },
                        new
                        {
                            UserId = 10,
                            Email = "jack.white@example.com",
                            FirstName = "Jack",
                            LastName = "White",
                            Phone = "345-678-9012"
                        });
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.AuthorBook", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookGenre", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookLibrary", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("BookLibraries")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.Library", "Library")
                        .WithMany("BookLibraries")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Library");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.BookPublisher", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("BookPublishers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.Publisher", "Publisher")
                        .WithMany("BookPublishers")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Hold", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("Holds")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.User", "User")
                        .WithMany("Holds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Loan", b =>
                {
                    b.HasOne("LibraryDatabaseClassLibrary.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryDatabaseClassLibrary.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Author", b =>
                {
                    b.Navigation("AuthorBooks");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Book", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("BookGenres");

                    b.Navigation("BookLibraries");

                    b.Navigation("BookPublishers");

                    b.Navigation("Holds");

                    b.Navigation("Loans");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Genre", b =>
                {
                    b.Navigation("BookGenres");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Library", b =>
                {
                    b.Navigation("BookLibraries");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.Publisher", b =>
                {
                    b.Navigation("BookPublishers");
                });

            modelBuilder.Entity("LibraryDatabaseClassLibrary.Models.User", b =>
                {
                    b.Navigation("Holds");

                    b.Navigation("Loans");
                });
#pragma warning restore 612, 618
        }
    }
}
